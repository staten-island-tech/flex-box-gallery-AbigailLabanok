*,
body,
html {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-size: 62.5%;
  font-family: "Bitter", serif;
}
body {
  background-color: #fff3f6;
}
.all-boxes {
  display: flex;
  justify-content: space-around;
  align-items: center;
  flex-wrap: wrap;
}
.main-header {
  text-align: center;
  margin: 5rem auto;
  font-size: 9rem;
  color: rgb(0, 71, 115);
  text-decoration: underline #153449;
}
.box {
  font-size: 8rem;
  color: #0076bf;
  border: solid 10px #153449;
  border-radius: 20px;
  width: 30%;
  height: 45vh;
  margin: 5rem auto;
  padding: 15px;
  text-align: center;
  box-shadow: 1rem 1rem 1rem #2b6790;
  background-color: #f1faff;
}
.images {
  width: 90%;
  border: solid 7px #091825;
  border-radius: 15px;
  margin-top: 1.5rem;
  opacity: 75%;
  transition: 0.3s;
}
.images:hover {
  transform: scale(1.05);
  opacity: 100%;
}
/* body {
	background: linear-gradient(-45deg, #ffd1c3, #ffc0d8, #baedff, #b9ffef);
	background-size: 400% 400%;
	animation: gradient 15s ease infinite;
	height: 100vh;
}

@keyframes gradient {
	0% {
		background-position: 0% 50%;
	}
	50% {
		background-position: 100% 50%;
	}
	100% {
		background-position: 0% 50%;
	}
} */

/* colors: #153449 and #006aab */
/* adding in border box makes sure that any childs under the parent stay within the box and doesnt go ouside it */
/* Normally, 100% is 16px, but we want the size to be 10px so we do 62.5% instead*/
/* alwasy start with padding 0, margin 0, box sizing border box, and font size 62.5*/
/* 1 rem is equal to the default font sixe (10px) --> rems allow the font size to be relative*/
/* 1 em is equal to the font size of the parent --> can be really powerful and a good tool but rem is easier*/
/* use flex grow to just use up and aditional space */
/* use percentages for width */
/* use flex-wrap: wrap; to align a bunch of elements that are in 1 in-line element into even spaces onto the page*/
/* using hover pseudo class adds an animation when you hover over an element */
/* use transitions to help transformations and animations to play out in certain ways over certain times */
/* the only way that the children elements will gain absolute positioning is if the parent has relative positioning */
